{"name":"Mockhttpinc","tagline":"An easy to use C library to test HTTP(S) client code.","body":"MockHTTPinC\r\n===========\r\n\r\nMockHTTPinC is a C library that helps testing HTTP client code.\r\n\r\nThe library provides:\r\n- a HTTP server that can be instructed to handle requests in certain ways: returning a prebaked response, abort the connection etc.\r\n- support for both HTTP/1.0 and HTTP/1.1 including pipelining and chunked encoding\r\n- macro's to make writing expectations and verifying the results straigthforward\r\n\r\nThe library will provide (but does not at this time):\r\n- strong HTTPS support: full SSL/TLS handshake, client certificates, session renegotiation and session resumption\r\n- a simple HTTP/HTTPS proxy\r\n- Basic and Digest authentication\r\n- Deflate/GZip content encoding support\r\n\r\nMockHTTPinC does not come with or mandate the use of a specific unit test framework. Instead it should integrate fine with the unit test framework your project is currently using.\r\n\r\nGetting started\r\n---------------\r\n\r\nInclude these 4 source files in your project:\r\n- MockHTTP.c\r\n- MockHTTP.h\r\n- MockHTTP_private.h\r\n- MockHTTP_server.c\r\n\r\nMockHTTPinC depends on these libraries:\r\n- Apache's apr and apr-util libraries. (http://apr.apache.org)\r\n- OpenSSL (http://www.openssl.org)\r\n\r\nAt this time the code conforms to the C99 standard. The code has been written with C89 in mind, but we use variadic macros (a C99 feature) to facilitate test writing.\r\n\r\nWrite a first test\r\n------------------\r\n\r\nIn these examples we will use the CuTest framework (https://github.com/asimjalis/cutest) as unit testing library, you'll recognize its functions by the *Cu* prefix.\r\n\r\n\r\n**Step 1**: Include MockHTTPinC's main header file, create a test function and setup the mock HTTP server on default port 30080.\r\n\r\n    #include \"MockHTTP.h\"\r\n\r\n    static void test_simple_request_response(CuTest *tc)\r\n    {\r\n      MockHTTP *mh;\r\n\r\n      InitMockHTTP(mh)\r\n        WithHTTPserver(WithPort(30080))\r\n      EndInit\r\n\r\n**Step 2**: Use the macro's to instruct the mock HTTP server to expect a GET request to url /index.html. Also, tell the server how to respond when that request arrives.\r\n\r\n        Given(mh)\r\n          GETRequest(\r\n            URLEqualTo(\"/index.html\"))\r\n          Respond(\r\n            WithCode(200), WithHeader(\"Connection\", \"Close\"), WithBody(\"body\"))\r\n        EndGiven\r\n\r\n**Step 3**: Run the code that's expected to eventually send a GET request to the server.\r\n\r\n        ctx = connectToTCPServer(\"http://localhost:30080\");\r\n        sendRequest(ctx, \"GET\", \"/index.html\", headers, \"body of the request\");\r\n        response = readResponse(ctx);\r\n\r\n        // ... test that the response was received correctly\r\n\r\n**Step 4**: Use the macro's to verify that all requests were received in the correct order, at least the one request in this simple example.\r\n\r\n        Verify(mh)\r\n          CuAssert(tc, ErrorMessage, VerifyAllRequestsReceivedInOrder);\r\n        EndVerify\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}